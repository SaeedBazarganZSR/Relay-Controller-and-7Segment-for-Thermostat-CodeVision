;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2/21/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 0.125000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;#include <delay.h>
;#include <stdint.h>
;#include <stdio.h>
;//----------------------------------------------------------------------
;typedef enum RelayNumber
;{
;	Fan = 0x01,
;	One = 0x02,
;	Two = 0x03,
;	Three = 0x04,
;	All = 0x05
;}Relay;
;
;unsigned char SegNum[10] = {0x30, 0xF9, 0x52, 0xD0, 0x99, 0x94, 0x14, 0xF1, 0x10, 0x90};

	.DSEG
;uint8_t tmp1, tmp2, tmp3;
;//----------------------------------------------------------------------
;void Relay_TurnOn(uint8_t Number);
;void Relay_TurnOff(uint8_t Number);
;void Warning_On(void);
;void Warning_Off(void);
;void Display(uint8_t Number);
;void Display_Configuration(uint8_t Number, uint8_t Place);
;//----------------------------------------------------------------------
;// SPI functions
;#include <spi.h>
;
;void main(void)
; 0000 0036 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0037 // Declare your local variables here
; 0000 0038 
; 0000 0039 // Crystal Oscillator division factor: 8
; 0000 003A #pragma optsize-
; 0000 003B CLKPR=(1<<CLKPCE);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 003C CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003D #ifdef _OPTIMIZE_SIZE_
; 0000 003E #pragma optsize+
; 0000 003F #endif
; 0000 0040 
; 0000 0041 // Input/Output Ports initialization
; 0000 0042 // Port B initialization
; 0000 0043 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0044 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0045 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0046 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0047 
; 0000 0048 // Port C initialization
; 0000 0049 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 004A DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004B // State: Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 004C PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 004D 
; 0000 004E // Port D initialization
; 0000 004F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0050 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0051 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0052 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0053 
; 0000 0054 // Timer/Counter 0 initialization
; 0000 0055 // Clock source: System Clock
; 0000 0056 // Clock value: Timer 0 Stopped
; 0000 0057 // Mode: Normal top=0xFF
; 0000 0058 // OC0A output: Disconnected
; 0000 0059 // OC0B output: Disconnected
; 0000 005A TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005B TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 005C TCNT0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 005D OCR0A=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005E OCR0B=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 1 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: Timer1 Stopped
; 0000 0063 // Mode: Normal top=0xFFFF
; 0000 0064 // OC1A output: Disconnected
; 0000 0065 // OC1B output: Disconnected
; 0000 0066 // Noise Canceler: Off
; 0000 0067 // Input Capture on Falling Edge
; 0000 0068 // Timer1 Overflow Interrupt: Off
; 0000 0069 // Input Capture Interrupt: Off
; 0000 006A // Compare A Match Interrupt: Off
; 0000 006B // Compare B Match Interrupt: Off
; 0000 006C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 006D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 006E TCNT1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006F TCNT1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0070 ICR1H=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0071 ICR1L=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0072 OCR1AH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0073 OCR1AL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0074 OCR1BH=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0075 OCR1BL=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 2 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: Timer2 Stopped
; 0000 007A // Mode: Normal top=0xFF
; 0000 007B // OC2A output: Disconnected
; 0000 007C // OC2B output: Disconnected
; 0000 007D ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007E TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007F TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0080 TCNT2=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0081 OCR2A=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0082 OCR2B=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0083 
; 0000 0084 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0085 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0086 
; 0000 0087 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0088 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0089 
; 0000 008A // Timer/Counter 2 Interrupt(s) initialization
; 0000 008B TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 008C 
; 0000 008D // External Interrupt(s) initialization
; 0000 008E // INT0: Off
; 0000 008F // INT1: Off
; 0000 0090 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0091 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0092 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0093 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0094 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0095 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0096 
; 0000 0097 // USART initialization
; 0000 0098 // USART disabled
; 0000 0099 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 009A 
; 0000 009B // Analog Comparator initialization
; 0000 009C // Analog Comparator: Off
; 0000 009D // The Analog Comparator's positive input is
; 0000 009E // connected to the AIN0 pin
; 0000 009F // The Analog Comparator's negative input is
; 0000 00A0 // connected to the AIN1 pin
; 0000 00A1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00A2 ADCSRB=(0<<ACME);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00A3 // Digital input buffer on AIN0: On
; 0000 00A4 // Digital input buffer on AIN1: On
; 0000 00A5 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00A6 
; 0000 00A7 // ADC initialization
; 0000 00A8 // ADC disabled
; 0000 00A9 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00AA 
; 0000 00AB // SPI initialization
; 0000 00AC // SPI Type: Master
; 0000 00AD // SPI Clock Rate: 31.250 kHz
; 0000 00AE // SPI Clock Phase: Cycle Start
; 0000 00AF // SPI Clock Polarity: Low
; 0000 00B0 // SPI Data Order: MSB First
; 0000 00B1 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00B2 SPSR=(0<<SPI2X);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00B3 
; 0000 00B4 // TWI initialization
; 0000 00B5 // TWI disabled
; 0000 00B6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00B7 
; 0000 00B8 while (1)
;PCODE: $00000064 VOL: 0
; 0000 00B9       {
; 0000 00BA         Display(100);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00BB       }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00BC }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;//----------------------------------------------------------------------
;void Relay_TurnOn(uint8_t Number)
; 0000 00BF {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00C0     switch(Number)
;PCODE: $0000006E VOL: 0
;	Number -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00C1     {
; 0000 00C2         case Fan:
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C3             PORTC.5 = 1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00C4         break;
;PCODE: $00000075 VOL: 0
; 0000 00C5         case One:
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00C6             PORTD.5 = 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00C7         break;
;PCODE: $0000007B VOL: 0
; 0000 00C8         case Two:
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C9             PORTD.6 = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00CA         break;
;PCODE: $00000081 VOL: 0
; 0000 00CB         case Three:
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00CC             PORTD.7 = 1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CD         break;
;PCODE: $00000087 VOL: 0
; 0000 00CE         case All:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00CF             PORTC.5 = 1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D0             PORTD.5 = 1;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00D1             PORTD.6 = 1;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D2             PORTD.7 = 1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D3         break;
;PCODE: $00000093 VOL: 0
; 0000 00D4     }
;PCODE: $00000094 VOL: 0
; 0000 00D5 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;//----------------------------------------------------------------------
;void Relay_TurnOff(uint8_t Number)
; 0000 00D8 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D9     switch(Number)
;PCODE: $0000009A VOL: 0
;	Number -> Y+0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DA     {
; 0000 00DB         case Fan:
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00DC             PORTC.5 = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DD         break;
;PCODE: $000000A1 VOL: 0
; 0000 00DE         case One:
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00DF             PORTD.5 = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E0         break;
;PCODE: $000000A7 VOL: 0
; 0000 00E1         case Two:
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E2             PORTD.6 = 0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E3         break;
;PCODE: $000000AD VOL: 0
; 0000 00E4         case Three:
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E5             PORTD.7 = 0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E6         break;
;PCODE: $000000B3 VOL: 0
; 0000 00E7         case All:
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E8             PORTC.5 = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E9             PORTD.5 = 0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EA             PORTD.6 = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00EB             PORTD.7 = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00EC         break;
;PCODE: $000000BF VOL: 0
; 0000 00ED     }
;PCODE: $000000C0 VOL: 0
; 0000 00EE }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;//----------------------------------------------------------------------
;void Warning_On(void)
; 0000 00F1 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00F2     PORTC.4 = 1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00F3 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;//----------------------------------------------------------------------
;void Warning_Off(void)
; 0000 00F6 {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F7     PORTC.4 = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F8 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;//----------------------------------------------------------------------
;void Display(uint8_t Number)
; 0000 00FB {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FC     tmp1 = (Number / 100) % 10;
;PCODE: $000000D2 VOL: 0
;	Number -> Y+0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00FD     tmp2 = (Number / 10) % 10;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00FE     tmp3 = (Number / 1) % 10;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00FF     if(Number == 100)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0100     {
; 0000 0101         Display_Configuration(tmp1, 1);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0102         delay_ms(5);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0103         Display_Configuration(tmp2, 2);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0104         delay_ms(5);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0105         Display_Configuration(tmp3, 3);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0106         delay_ms(5);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0107     }
; 0000 0108     else if(Number >= 10 && Number < 100)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0109     {
; 0000 010A         Display_Configuration(tmp2, 2);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 010B         delay_ms(5);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 010C         Display_Configuration(tmp3, 3);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 010D         delay_ms(5);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 010E     }
; 0000 010F     else if(Number < 10)
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0110     {
; 0000 0111         Display_Configuration(tmp3, 3);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0112         delay_ms(5);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0113     }
; 0000 0114 }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;//----------------------------------------------------------------------
;void Display_Configuration(uint8_t Number, uint8_t Place)
; 0000 0117 {
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0118     switch(Place)
;PCODE: $00000128 VOL: 0
;	Number -> Y+1
;	Place -> Y+0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0119     {
; 0000 011A         case 1:
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 011B             PORTB.0 = 0;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 011C             PORTB.1 = 1;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 011D             PORTB.2 = 1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 011E             spi(SegNum[Number]);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 011F             PORTC.3 = 1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0120             PORTC.3 = 0;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0121         break;
;PCODE: $0000013C VOL: 0
; 0000 0122         case 2:
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0123             PORTB.0 = 1;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0124             PORTB.1 = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0125             PORTB.2 = 1;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0126             spi(SegNum[Number]);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0127             PORTC.3 = 1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0128             PORTC.3 = 0;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0129         break;
;PCODE: $0000014F VOL: 0
; 0000 012A         case 3:
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 012B             PORTB.0 = 1;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 012C             PORTB.1 = 1;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 012D             PORTB.2 = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 012E             spi(SegNum[Number]);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 012F             PORTC.3 = 1;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0130             PORTC.3 = 0;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0131         break;
;PCODE: $00000162 VOL: 0
; 0000 0132     }
;PCODE: $00000163 VOL: 0
; 0000 0133 }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;//----------------------------------------------------------------------
